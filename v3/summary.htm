<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml"> <head>  <title>Summary: Mixed Feelings</title> <body>  <!-- d3.js: http://mbostock.github.com/d3/-->   <link rel="stylesheet" href="./css/960_12_col.css" />  <link rel="stylesheet" href="./css/common.css" />  <link rel="stylesheet" href="./css/vizstyle.css" />  <link rel="stylesheet" href="./css/style.css" />    <script type="text/javascript" src="./js/d3.js"></script>  <script type="text/javascript" src="./js/d3.layout.js"></script>  <script type="text/javascript" src="./js/d3.csv.js"></script>  <style type="text/css">       svg {         shape-rendering: crispEdges;        }       .rule line {         stroke: #eee;       }       td {         padding: 10px;        }  </style><center><div id="summary"><script type="text/javascript">d3.csv("./data/markers-annotate-data.csv", function(data) {      var samp_size = 0;     var val_array = new Array(),         question_array = new Array(),         neg_array = new Array(),         pos_array = new Array(),         amb_array = new Array();    sampsize = data.length;    for (var i=0; i < sampsize; i++) {       question_array[i] = data[i].questions;       neg_array[i] =  parseFloat(data[i].neg_score);       pos_array[i] =  parseFloat(data[i].pos_score);       amb_array[i] =  parseFloat(data[i].amb_score);       val_array[i] = { label: question_array[i], neg_score: neg_array[i], pos_score: pos_array[i], amb_score: amb_array[i] };       //document.write('<p>' + question_array[i] +  ': ' + val_array[i].amb_score + '</p>');       //document.write('<p>' + i + '</p>');      }var w = 620,    h = 500,    labelpad = 195,    titlepad = 100,    leftpad = 60,    footnote = 15,    p = 10,    x = d3.scale.linear().domain([-280,340]).range([0, w - labelpad]),    y = d3.scale.linear().domain([0,question_array.length]).range([0, h - titlepad - footnote])    z = d3.scale.linear().domain([0,question_array.length]).range([0, 70]);var colors = ["#026eba", "#0071BC", "#7d0f6d", "#9E005D"] ;var vis = d3.select("#summary")   .append("svg:svg")     .attr("class", "chart")     .attr("width", w + 2*p)     .attr("height", h + 2*p);var bars = vis.selectAll("svg")     .data(val_array)   .enter().append("svg:rect")     .attr("fill", "white")      .attr("stroke", "black")      .attr("x", labelpad)     .attr("y", function(d,i){ return titlepad + y(i); })     .attr("width",  w - labelpad - leftpad)     .attr("height", 4);var circle = vis.selectAll("circle")     .data(val_array)   .enter().append("svg:circle")     .attr("fill", colors[3])      .attr("stroke", colors[2])      .attr("stroke-width", 2)     .attr("cx", function(d){ return labelpad + x(d.neg_score) - leftpad; }) //150 + labelpad)     .attr("cy", function(d,i){ return titlepad + y(i) + 2; })     .attr("r", 6);var rules = vis.selectAll("g.rule")    .data(pos_array)  .enter().append("svg:g")    .attr("class", "rule");rules.append("svg:circle")     .attr("fill", colors[1])      .attr("stroke", colors[0])      .attr("stroke-width", 2)     .attr("cx", function(d,i){ return  labelpad + x(d); }) //130 + labelpad)     .attr("cy", function(d,i){ return titlepad + y(i) + 2; })     .attr("r", 6);rules.append("svg:text")   .attr("x", 0)   .attr("y", function(d,i){ return 6 + titlepad + y(i); })   .text(function(d,i){ return question_array[i]; });rules.append("svg:text")   .attr("x", w + p - leftpad)   .attr("y", function(d,i){ return 6 + titlepad + y(i); })   .text(function(d,i){ return amb_array[i]; });rules.append("svg:line")   .attr("x1", function(d,i){ return Math.min(labelpad + i*(w - labelpad - leftpad)/7, w - leftpad); })   .attr("y1", titlepad - p/2)   .attr("x2", function(d,i){ return Math.min(labelpad + i*(w - labelpad - leftpad)/7, w - leftpad); })   .attr("y2", h - footnote - 3*p/2)   .attr("stroke-width", 3)   .attr("stroke-opacity", .5);/*rules.append("svg:text")   .attr("x", function(d,i){ return Math.min(labelpad + i*(w - labelpad - leftpad)/7, w - leftpad) - 5; })   .attr("y", h - footnote - p/2)   .text(function(d,i){ return Math.min(10*i, 70); });*/vis.append("svg:text")   .attr("x", 0)   .attr("y", 15)   .text("Summary");vis.append("svg:circle")   .attr("fill", colors[1])    .attr("stroke", colors[0])    .attr("stroke-width", 2)   .attr("cx", p)   .attr("cy", 15 + 3*p)   .attr("r", 6);vis.append("svg:text")   .attr("x", 2*p)   .attr("y", 10 + 4*p)   .text("Positive");vis.append("svg:circle")   .attr("fill", colors[3])    .attr("stroke", colors[2])    .attr("stroke-width", 2)   .attr("cx", 14*p)   .attr("cy", 15 + 3*p)   .attr("r", 6);vis.append("svg:text")   .attr("x", 15*p)   .attr("y", 10 + 4*p)   .text("Negative");vis.append("svg:text")   .attr("x", w-leftpad-4*p)   .attr("y", 10 + 3*p)   .text("Ambivalence");/*vis.append("svg:text")   .attr("x", w-leftpad-12*p)   .attr("y", 10 + 5*p)   .text("(100 = perfect inequality)");*/vis.append("svg:line")  .attr("stroke", "black")  .style("stroke-width", 3)  .attr("x1", w-leftpad + 1.5*p)  .attr("y1", 6.5*p )  .attr("x2", w-leftpad + 1.5*p)  .attr("y2", titlepad - p );});</script></div></center></body> </html>